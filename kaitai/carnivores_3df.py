# Autogenerated and manually edited file; see README.md for more details
from . import kaitaistruct
from .kaitaistruct import KaitaiStruct, KaitaiStream, BytesIO

if getattr(kaitaistruct, 'API_VERSION', (0, 9)) < (0, 9):
    raise Exception("Incompatible Kaitai Struct Python API: 0.9 or later is required, but you have %s" % (kaitaistruct.__version__))

class Carnivores3df(KaitaiStruct):
    def __init__(self, _io, _parent=None, _root=None):
        self._io = _io
        self._parent = _parent
        self._root = _root if _root else self
        self._read()

    def _read(self):
        self.num_vertices = self._io.read_u4le()
        self.num_faces = self._io.read_u4le()
        self.num_bones = self._io.read_u4le()
        self.len_texture = self._io.read_u4le()
        self.faces = []
        for i in range(self.num_faces):
            self.faces.append(Carnivores3df.Face(self._io, self, self._root))

        self.vertices = []
        for i in range(self.num_vertices):
            self.vertices.append(Carnivores3df.Vertex(self._io, self, self._root))

        self.bones = []
        for i in range(self.num_bones):
            self.bones.append(Carnivores3df.Bone(self._io, self, self._root))

        if (self._io.size() - self._io.pos()) >= self.len_texture:
            self.texture = self._io.read_bytes(self.len_texture)


    class Face(KaitaiStruct):
        def __init__(self, _io, _parent=None, _root=None):
            self._io = _io
            self._parent = _parent
            self._root = _root if _root else self
            self._read()

        def _read(self):
            self.indices = []
            for i in range(3):
                self.indices.append(self._io.read_u4le())

            self.u = []
            for i in range(3):
                self.u.append(self._io.read_u4le())

            self.v = []
            for i in range(3):
                self.v.append(self._io.read_u4le())

            self.flags = self._io.read_u2le()
            self.dmask = self._io.read_u2le()
            self.distant = self._io.read_u4le()
            self.next = self._io.read_s4le()
            self.group = self._io.read_u4le()
            self.reserved = self._io.read_bytes(12)


    class Vertex(KaitaiStruct):
        def __init__(self, _io, _parent=None, _root=None):
            self._io = _io
            self._parent = _parent
            self._root = _root if _root else self
            self._read()

        def _read(self):
            self.x = self._io.read_f4le()
            self.y = self._io.read_f4le()
            self.z = self._io.read_f4le()
            self.bone_index = self._io.read_u2le()
            self.hidden = self._io.read_u2le()


    class Bone(KaitaiStruct):
        def __init__(self, _io, _parent=None, _root=None):
            self._io = _io
            self._parent = _parent
            self._root = _root if _root else self
            self._read()

        def _read(self):
            self.name = (KaitaiStream.bytes_terminate(self._io.read_bytes(32), 0, False)).decode(u"utf8")
            self.x = self._io.read_f4le()
            self.y = self._io.read_f4le()
            self.z = self._io.read_f4le()
            self.parent = self._io.read_s2le()
            self.hidden = self._io.read_u2le()



